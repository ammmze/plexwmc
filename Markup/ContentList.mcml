<Mcml xmlns="http://schemas.microsoft.com/2008/mcml"
	  xmlns:app="assembly://PlexWMC/PlexWMC"
	  xmlns:sys="assembly://mscorlib/System"
	  xmlns:styles="resx://PlexWMC/PlexWMC.Resources/Styles"
	  xmlns:core="resx://PlexWMC/PlexWMC.Resources/CoreControls"
	  xmlns:me="Me">

  <Aggregate Source="resx://PlexWMC/PlexWMC.Resources/FilterList"/>

  <!-- A scrolling content list -->
  <!-- This template is built to be generic with respect to the direction -->
  <!-- of scrolling.  Setting the scrolling orientation property will     -->
  <!-- automatically adjust the positioning of the scroll arrows.         -->
  <UI Name="ContentList">

    <Properties>
      <!-- The source of content for this list -->
      <app:ContentPage Name="Page" ContentPage="$Required"/>

      <!-- The direction to scroll -->
      <Orientation Name="ScrollOrientation" Orientation="Horizontal"/>

      <!-- The layout of the items -->
      <GridLayout Name="GridLayout" Orientation="Horizontal" Rows="1"
				Spacing="0,0" AllowWrap="false" Repeat="Never"/>

      <!-- An object to track which item in the list currently has focus -->
      <IntRangedValue Name="FocusedIndex"/>

      <!-- These anchors represent the four places we could position  -->
      <!-- our scroll arrows.  Depending on the orientation of the    -->
      <!-- scroller we will pick a pair of these.                     -->
      <AnchorLayoutInput Name="AlignToTop"
				Top="Scroller,0,-100" Bottom="Scroller,0,-15" Vertical="Far"
				Left="Scroller,0" Right="Scroller,1" Horizontal="Center"
				ContributesToHeight="false"/>
      <AnchorLayoutInput Name="AlignToBottom"
				Top="Scroller,1,15" Bottom="Scroller,1,100" Vertical="Near"
				Left="Scroller,0" Right="Scroller,1" Horizontal="Center"
				ContributesToHeight="false"/>
      <AnchorLayoutInput Name="AlignToLeft"
				Left="Scroller,0,-100" Right="Scroller,0,-15" Horizontal="Far"
				Top="Scroller,0" Bottom="Scroller,1" Vertical="Center"
				ContributesToWidth="false"/>
      <AnchorLayoutInput Name="AlignToRight"
				Left="Scroller,1,15" Right="Scroller,1,100" Horizontal="Near"
				Top="Scroller,0" Bottom="Scroller,1" Vertical="Center"
				ContributesToWidth="false"/>
    </Properties>

    <Locals>
      <!-- Scrolling state -->
      <ScrollingHandler Name="ScrollHandler" HandlerStage="Bubbled"/>
      <ScrollingData Name="ScrollData"/>

      <!-- Scroll actions -->
      <Command Name="ScrollUp" Description="Up"/>
      <Command Name="ScrollDown" Description="Down"/>
    </Locals>

    <Rules>
      <!-- Associate all the scrolling objects -->
      <Default Target="[ScrollHandler.ScrollingData]" Value="[ScrollData]"/>
      <Default Target="[ScrollData.Repeater]" Value="[Repeater]"/>

      <!-- Only show the scroll buttons if we can scroll in that direction -->
      <!-- <Binding Source="[ScrollData.CanScrollUp]" Target="[ScrollUpButton.Visible]"/> -->
      <!-- <Binding Source="[ScrollData.CanScrollDown]" Target="[ScrollDownButton.Visible]"/> -->

      <!-- Scroll up/left -->
      <Changed Source="[ScrollUp.Invoked]">
        <Actions>
          <Invoke Target="[ScrollData.PageUp]"/>
        </Actions>
      </Changed>

      <!-- Scroll down/right -->
      <Changed Source="[ScrollDown.Invoked]">
        <Actions>
          <Invoke Target="[ScrollData.PageDown]"/>
        </Actions>
      </Changed>

      <!-- If we are vertical use the top/bottom scroll button positions -->
      <Condition Source="[ScrollOrientation]" SourceValue="Vertical">
        <Actions>
          <Set Target="[ScrollUpButton.LayoutInput]" Value="[AlignToTop]"/>
          <Set Target="[ScrollDownButton.LayoutInput]" Value="[AlignToBottom]"/>
          <Set Target="[ScrollUpButton.Image]" Value="resx://PlexWMC/PlexWMC.Resources/MouseNavUp"/>
          <Set Target="[ScrollUpButton.FocusImage]" Value="resx://PlexWMC/PlexWMC.Resources/MouseNavUpFocus"/>
          <Set Target="[ScrollDownButton.Image]" Value="resx://PlexWMC/PlexWMC.Resources/MouseNavDown"/>
          <Set Target="[ScrollDownButton.FocusImage]" Value="resx://PlexWMC/PlexWMC.Resources/MouseNavDownFocus"/>
        </Actions>
      </Condition>

      <Binding Source="[Page.Content]" Target="[Repeater.Source]" />
      <Binding Source="[FocusedIndex.Value]" Target="[Repeater.DefaultFocusIndex]" />
    </Rules>

    <Content>
      <Panel Layout="Anchor">
        <Children>

          <!-- Scroll up -->
          <me:ScrollButton Name="ScrollUpButton" Model="[ScrollUp]"
						Image="resx://PlexWMC/PlexWMC.Resources/MouseNavLeft" FocusImage="resx://PlexWMC/PlexWMC.Resources/MouseNavLeftFocus"
            LayoutInput="[AlignToLeft]" Visible="false"/>

          <!-- Scroll down -->
          <me:ScrollButton Name="ScrollDownButton" Model="[ScrollDown]"
						Image="resx://PlexWMC/PlexWMC.Resources/MouseNavRight" FocusImage="resx://PlexWMC/PlexWMC.Resources/MouseNavRightFocus"
            LayoutInput="[AlignToRight]" Visible="false"/>

          <!-- Scrolling area -->
          <Scroller Name="Scroller" Orientation="[ScrollOrientation]"
							ScrollingData="[ScrollData]" FadeSize="-5" Navigation="RememberFocus,PreferFocusOrder,ContainHorizontal">
            <Children>

              <!-- Content repeater -->
              <Repeater Name="Repeater" ContentName="Item" DefaultFocusIndex="[FocusedIndex.Value]" Layout="[GridLayout]"  Navigation="RememberFocus">
                <Animations>

                  <!-- Scrolling animation -->
                  <Animation Type="Move">
                    <Keyframes>
                      <PositionKeyframe Time="0.00" RelativeTo="Current"/>
                      <PositionKeyframe Time="0.25" RelativeTo="Final"/>
                    </Keyframes>
                  </Animation>

                </Animations>
              </Repeater>

            </Children>
          </Scroller>

        </Children>
      </Panel>
    </Content>

    <!-- We use a named Content here instead of inline repeater content -->
    <!-- so that derived templates may customize the repeated item      -->
    <!-- without replacing the entire content tree.                     -->
    <Content Name="Item">
      <me:ThumbnailButton Model="[RepeatedItem!app:ThumbnailCommand]"
				Index="[RepeatedItemIndex]" FocusedIndex="[FocusedIndex]" Page="[Page]"/>
    </Content>
  </UI>


  <!-- A wrapper around the thumbnail button that adds focus tracking -->
  <UI Name="ThumbnailButton" BaseUI="core:ThumbnailButton">
    <Properties>
      <Index Name="Index" Index="$Required"/>
      <IntRangedValue Name="FocusedIndex" IntRangedValue="$Required"/>
      <app:ContentPage Name="Page" ContentPage="$Required"/>
    </Properties>

    <Locals>
      <sys:Boolean Name="Initialized" Boolean="false"/>
    </Locals>

    <Rules>

      <Rule ConditionLogicalOp="And">
        <Conditions>
          <Equality Source="[Initialized]" Value="false"/>
          <Equality Source="[Index.Value]" Value="0"/>
        </Conditions>
        <Actions>
          <Set Target="[Initialized]" Value="true"/>
          <Set Target="[FocusedIndex.Value]" Value="[Index.Value]"/>
          <Set Target="[Page.Title]" Value="[Model.Title]"/>
          <Set Target="[Page.Metadata]" Value="[Model.Metadata]"/>
          <Set Target="[Page.Summary]" Value="[Model.Summary]"/>
        </Actions>
      </Rule>

      <Condition Source="[Input.KeyFocus]" SourceValue="true">
        <Actions>
          <!-- Inform any listeners of FocusedIndex that we have received -->
          <!-- key focus.-->
          <Set Target="[FocusedIndex.Value]" Value="[Index.Value]"/>
          <Set Target="[Page.Title]" Value="[Model.Title]"/>
          <Set Target="[Page.Metadata]" Value="[Model.Metadata]"/>
          <Set Target="[Page.Summary]" Value="[Model.Summary]"/>
        </Actions>
      </Condition>

    </Rules>
  </UI>


  <!-- A textual display of our current focus relative to the size of the -->
  <!-- total list (e.g. 2 of 50).                                         -->
  <UI Name="ItemCounter">
    <Properties>
      <app:ContentPage Name="Page" ContentPage="$Required"/>
      <IntRangedValue Name="FocusedIndex" IntRangedValue="$Required"/>
      <Color Name="TextColor" Color="color://styles:Text.Active"/>
    </Properties>

    <Locals>
      <!-- An intermediate used to display the value of FocusedIndex -->
      <sys:String Name="FocusedIndexString" String=""/>
    </Locals>

    <Rules>
      <!-- Whenever the focused index changes recreate our string. -->
      <Changed Source="[FocusedIndex.Value]" InitialEvaluate="true">
        <Actions>
          <Set Target="[FocusedIndexString]" Value="[FocusedIndex.Value]">
            <!-- Convert from zero-based to a one-based index -->
            <Transformer>
              <MathTransformer AddInt="1" Type="String"/>
            </Transformer>
          </Set>
        </Actions>
      </Changed>

      <!-- Concatenate FocusedIndexString and ItemCountString. -->
      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Modified Source="[FocusedIndexString]"/>
          <Modified Source="[Page.Content.Count]"/>
        </Conditions>
        <Actions>
          <!-- The final value will be something like "2 of 50" -->
          <Invoke Target="[FocusedIndexString.Concat]" ResultTarget="[Text.Content]"
						str0="[FocusedIndexString]"
						str1="resx://PlexWMC/PlexWMC.Resources/Shell_ItemCounterSeperator"
						str2="[Page.Content.Count.ToString]"/>
        </Actions>
      </Rule>

      <!-- Only display anything if the count is non-zero. -->
      <Condition Source="[Page.Content.Count]" ConditionOp="GreaterThan" SourceValue="0"
				Target="[Text.Visible]" Value="true"/>

      <!-- Accessibility -->
      <Binding Target="[Accessible.Value]" Source="[Text.Content]"/>
      <Default Target="[Accessible.Role]"  Value="StaticText"/>
    </Rules>

    <Content>
      <!-- The label -->
      <Text Name="Text" Color="[TextColor]" Font="font://styles:SecondaryText" Visible="false"/>
    </Content>
  </UI>

  <!-- A list scroll button -->
  <UI Name="ScrollButton" BaseUI="core:Button">
    <Properties>
      <Size Name="TileMinSize" Size="0,0"/>
      <Size Name="TileMaxSize" Size="20,20"/>
    </Properties>

    <Rules>
      <!-- Mouse interactive only -->
      <Default Target="[Input.KeyInteractive]" Value="false"/>

      <!-- No label -->
      <Default Target="[Label.Visible]" Value="false"/>
      <Default Target="[Background.SizingPolicy]" Value="SizeToConstraint"/>

      <!-- Mouse focused styling -->
      <Condition Source="[Input.MouseFocus]" SourceValue="true">
        <Actions>
          <Set Target="[Background.Content]" Value="[FocusImage]"/>
        </Actions>
      </Condition>
    </Rules>
  </UI>

</Mcml>
